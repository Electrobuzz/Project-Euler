#include <bits/stdc++.h>

using namespace std;

template<typename A, typename B> ostream& operator<<(ostream &os, const pair<A, B> &p) { return os << '(' << p.first << ", " << p.second << ')'; }
template<typename T_container, typename T = typename enable_if<!is_same<T_container, string>::value, typename T_container::value_type>::type> ostream& operator<<(ostream &os, const T_container &v) { os << '{'; string sep; for (const T &x : v) os << sep << x, sep = ", "; return os << '}'; }
void dbg_out() { cerr << endl; }
template<typename Head, typename... Tail> void dbg_out(Head H, Tail... T) { cerr << ' ' << H; dbg_out(T...); }
#ifdef LOCAL
#define dbg(...) cerr << "(" << #__VA_ARGS__ << "):", dbg_out(__VA_ARGS__)
#else
#define dbg(...)
#endif

#define ar array
#define ll long long
#define ld long double
#define sza(x) ((int)x.size())
#define all(a) (a).begin(), (a).end()

const int MAX_N = 1e5 + 5;
const ll MOD = 1e9 + 7;
const ll INF = 1e9;
const ld EPS = 1e-9;

// Check for Pandigital from 1 to 9
bool check(int n){
	set<int> s;
	while(n>0){
		int t = n%10;
		if(t == 0) return false;
		s.insert(t);
		n/=10;
	}
	if(sza(s) == 9) return true;
	return false;
}

void solve() {
	int ans=0;
    for(int i=918;i<=9999;i++){ // It is easy to prove that we need to check only till 9999 as above this from x2 will lead to more than 9 digits
    	string st = "";
    	
    	for(int j=1;j<=9;j++){
    		string s = to_string(i*j);
    		if(sza(st)+sza(s) >9) break;
    		st += s;
    	}
    	
    	if(check(stoi(st)) && stoi(st) > 918273645){
    		ans = max(ans, stoi(st));
    	} 
    }
    cout<<ans;
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    int tc = 1;
    // cin >> tc;
    for (int t = 1; t <= tc; t++) {
        // cout << "Case #" << t << ": ";
        solve();
    }
}
