// Problem: A. Skibidus and Amog'u
// Contest: Codeforces - Codeforces Round 1003 (Div. 4)
// URL: https://codeforces.com/contest/2065/problem/A
// Memory Limit: 256 MB
// Time Limit: 1000 ms
// 
// Powered by CP Editor (https://cpeditor.org)

#include <bits/stdc++.h>

using namespace std;

template<typename A, typename B> ostream& operator<<(ostream &os, const pair<A, B> &p) { return os << '(' << p.first << ", " << p.second << ')'; }
template<typename T_container, typename T = typename enable_if<!is_same<T_container, string>::value, typename T_container::value_type>::type> ostream& operator<<(ostream &os, const T_container &v) { os << '{'; string sep; for (const T &x : v) os << sep << x, sep = ", "; return os << '}'; }
void dbg_out() { cerr << endl; }
template<typename Head, typename... Tail> void dbg_out(Head H, Tail... T) { cerr << ' ' << H; dbg_out(T...); }
#ifdef LOCAL
#define dbg(...) cerr << "(" << #__VA_ARGS__ << "):", dbg_out(__VA_ARGS__)
#else
#define dbg(...)
#endif

#define ar array
#define ll long long
#define ld long double
#define sza(x) ((int)x.size())
#define all(a) (a).begin(), (a).end()

const int MAX_N = 1e5 + 5;
const ll MOD = 1e9 + 7;
const ll INF = 1e9;
const ld EPS = 1e-9;


int fac(int n){
	if(n==0) return 1;
	else if(n==1) return 1;
	else if(n==2) return 2;
	else if(n==3) return 6;
	else if(n==4) return 24;
	else if(n==5) return 120;
	else if(n==6) return 720;
	else if(n==7) return 5040;
	else if(n==8) return 40320;
	else if(n==9) return 362880;
	
	return 1;
}

void solve() {
	long long ans=0;
	// 2 digit numbers
	for(int a=1;a<=9;a++){
		for(int b=1;b<=9;b++){
			if(fac(a)+fac(b) == (a*10+b)){
				cout<<a*10+b<<endl;
				ans += (a*10+b);
			}
		}
	}
	// no 2 digit solutions

    // 3 digit numbers
    for(int a=1;a<=9;a++){
		for(int b=1;b<=9;b++){
			for(int c=1;c<=9;c++){
				if(fac(a)+fac(b)+fac(c) == a*100+b*10+c){
					cout<<(a*100+b*10+c)<<endl;
					ans += (a*100+b*10+c);
				}
			}
		}
	}
	// 1 3 digit soln
	
	// 4 digit numbers
	for(int a=1;a<=7;a++){
		for(int b=0;b<=7;b++){
			for(int c=0;c<=7;c++){
				for(int d=0;d<=7;d++){
					if(fac(a)+fac(b)+fac(c)+fac(d) == a*1000+b*100+c*10+d){
						cout<<(a*1000+b*100+c*10+d)<<endl;
						ans += (a*1000+b*100+c*10+d);
					}
				}
			}
		}
	}
	
	//5 digit
	for(int a=1;a<=9;a++){
		for(int b=0;b<=9;b++){
			for(int c=0;c<=9;c++){
				for(int d=0;d<=9;d++){
					for(int e=0;e<=9;e++){
						if(fac(a)+fac(b)+fac(c)+fac(d)+fac(e) == a*10000+b*1000+c*100+d*10+e){
							cout<<(a*10000+b*1000+c*100+d*10+e)<<endl;
							ans += (a*10000+b*1000+c*100+d*10+e);
						}
					}
				}
			}
		}
	}
	
	// 6 digit
	for(int a=1;a<=9;a++){
		for(int b=0;b<=9;b++){
			for(int c=0;c<=9;c++){
				for(int d=0;d<=9;d++){
					for(int e=0;e<=9;e++){
						for(int f=0;f<=9;f++){
							if(fac(a)+fac(b)+fac(c)+fac(d)+fac(e)+fac(f) == a*100000+b*10000+c*1000+d*100+e*10+f){
								cout<<(a*100000+b*10000+c*1000+d*100+e*10+f)<<endl;
								ans += (a*100000+b*10000+c*1000+d*100+e*10+f);
							}
						}
					}
				}
			}
		}
	}
	
	// 7 digits
	for(int a=1;a<=9;a++){
		for(int b=0;b<=9;b++){
			for(int c=0;c<=9;c++){
				for(int d=0;d<=9;d++){
					for(int e=0;e<=9;e++){
						for(int f=0;f<=9;f++){
							for(int g=0;g<=9;g++){
								if(fac(a)+fac(b)+fac(c)+fac(d)+fac(e)+fac(f)+fac(g) == a*1000000+b*100000+c*10000+d*1000+e*100+f*10+g){
									cout<<(a*1000000+b*100000+c*10000+d*1000+e*100+f*10+g)<<endl;
									ans += (a*1000000+b*100000+c*10000+d*1000+e*100+f*10+g);
								}
							}
						}
					}
				}
			}
		}
	}
	
	
	/* It can be proved that answer cannot have more than 7 digits
	to prove let say there exist a 8 digit solution,
	even if all digits are 9, which maximize the sum as 8*9! = a 7 digit number
	a 8 digit number can't be equal to a 7 digit number
	Hence by contradiction, answer can only have at most 7 digits
	*/ 
	cout<<ans<<endl;
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    int tc = 1;
    // cin >> tc;
    for (int t = 1; t <= tc; t++) {
        // cout << "Case #" << t << ": ";
        solve();
    }
}
