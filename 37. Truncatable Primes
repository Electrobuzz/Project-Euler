#include <bits/stdc++.h>

using namespace std;

template<typename A, typename B> ostream& operator<<(ostream &os, const pair<A, B> &p) { return os << '(' << p.first << ", " << p.second << ')'; }
template<typename T_container, typename T = typename enable_if<!is_same<T_container, string>::value, typename T_container::value_type>::type> ostream& operator<<(ostream &os, const T_container &v) { os << '{'; string sep; for (const T &x : v) os << sep << x, sep = ", "; return os << '}'; }
void dbg_out() { cerr << endl; }
template<typename Head, typename... Tail> void dbg_out(Head H, Tail... T) { cerr << ' ' << H; dbg_out(T...); }
#ifdef LOCAL
#define dbg(...) cerr << "(" << #__VA_ARGS__ << "):", dbg_out(__VA_ARGS__)
#else
#define dbg(...)
#endif

#define ar array
#define ll long long
#define ld long double
#define sza(x) ((int)x.size())
#define all(a) (a).begin(), (a).end()

const int MAX_N = 1e5 + 5;
const ll MOD = 1e9 + 7;
const ll INF = 1e9;
const ld EPS = 1e-9;

int isprime(int n){
	if(n == 1) return 0;
	for(int i=2;i<=sqrt(n);i++){
		if(n%i == 0) return 0;
	}
	return 1;
}
int ans =0;
int check(int n){
	int flag = 0;
	for(int i=0;i<5;i++){
		if(isprime(n)){
			flag =1;
		}
		else{
			flag = 0;
			break;
		}
		n /=10;
	}
	if(flag == 1) return 1;
	return 0;
}

void solve() {
	for(int i=3;i<=7;i+=2){
		for(int j=1;j<=9;j++){
			int a = j*10+i;
			if(check(a)){
				cout<<a<<endl;
				ans+=a;
			}
			if(isprime(a)){
				for(int k=1;k<=9;k++){
					int b = k*100+a;
					if(check(b)) {
						cout<<b<<endl;
						ans += b;
					}
				
					if(isprime(b)){ // 3 digit
						for(int l=1;l<=9;l++){
							int c = l*1000+b; // 4 digit
							if(check(c)){
								cout<<c<<endl;
								ans += c;
							} 
							if(isprime(c)){
								for(int m=1;m<=9;m++){
									int d= m*10000+c; // 5 digit
									if(isprime(d)){
										if(check(d)){
											cout<<d<<endl;
											ans += d;
										} 
										for(int n=1;n<=9;n++){
											int e = n*100000+d;
											if(check(e)){
												cout<<e<<endl;
												ans+=e;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
 // I haven't proved why only 6 digits are needed but as the problem said, only 11 exist, so I stopped at 6 digits
 // maybe add the proof later :)
	cout<<ans<<endl;
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    int tc = 1;
    // cin >> tc;
    for (int t = 1; t <= tc; t++) {
        // cout << "Case #" << t << ": ";
        solve();
    }
}
